// ***********************************************************************
// Assembly         : KsWare.IO.NamedPipes
// Author           : SchreinerK
// Created          : 02-02-2018
//
// Last Modified By : SchreinerK
// Last Modified On : 02-09-2018
// ***********************************************************************
// <copyright file="NamedPipeClient.cs" company="KsWare">
//     Copyright © 2018 by KsWare. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.IO;
using System.IO.Pipes;
using System.Threading;
using KsWare.IO.NamedPipes.Internal;

namespace KsWare.IO.NamedPipes {

	/// <summary>
	/// Class NamedPipeClient.
	/// </summary>
	/// <seealso cref="System.IDisposable" />
	/// <autogeneratedoc />
	public class NamedPipeClient : IDisposable {
		//TODO Unsolicited Messages

		private NamedPipeClientStreams _streams;

		/// <summary>
		/// Initializes a new instance of the <see cref="NamedPipeClient"/> class.
		/// </summary>
		/// <param name="pipeName">Name of the pipe.</param>
		/// <autogeneratedoc />
		public NamedPipeClient(string pipeName) {
			_streams = new NamedPipeClientStreams(pipeName);
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="NamedPipeClient"/> class.
		/// </summary>
		/// <param name="pipeName">Name of the pipe.</param>
		/// <param name="connectTimeOut">The connect time out.</param>
		/// <autogeneratedoc />
		public NamedPipeClient(string pipeName, int connectTimeOut) {
			try {
				_streams = new NamedPipeClientStreams(pipeName);
				_streams.Connect(connectTimeOut);
			}
			catch {
				_streams?.Dispose();
				throw;
			}
		}

		/// <summary>
		/// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
		/// </summary>
		/// <autogeneratedoc />
		public void Dispose() {
			_streams.Dispose();
		}

		/// <summary>
		/// Sends the request.
		/// </summary>
		/// <param name="request">The request.</param>
		/// <returns>System.String.</returns>
		/// <exception cref="ArgumentNullException">request</exception>
		/// <autogeneratedoc />
		public string SendRequest(string request) {
			if (request==null) throw new ArgumentNullException(nameof(request));

			_streams.Writer.WriteLine(request);
			_streams.Writer.Flush();
			_streams.WaitForPipeDrain();
			var response = _streams.Reader.ReadLine();
			return response;
		}

		/// <summary>
		/// Connects the specified timeout milliseconds.
		/// </summary>
		/// <param name="timeoutMilliseconds">The timeout milliseconds.</param>
		/// <autogeneratedoc />
		public void Connect(int timeoutMilliseconds=100) {
			_streams.Connect(timeoutMilliseconds);
		}
	}

}
