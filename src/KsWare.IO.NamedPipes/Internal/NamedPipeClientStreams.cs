// ***********************************************************************
// Assembly         : KsWare.IO.NamedPipes
// Author           : SchreinerK
// Created          : 02-03-2018
// ***********************************************************************
// <copyright file="NamedPipeClientStreams.cs" company="KsWare">
//     Copyright © 2018-2021 by KsWare. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.IO.Pipes;

namespace KsWare.IO.NamedPipes.Internal {

	/// <summary>
	/// Class NamedPipeClientStreams.
	/// </summary>
	/// <seealso cref="KsWare.IO.NamedPipes.Internal.NamedPipeStreams" />
	/// <autogeneratedoc />
	public class NamedPipeClientStreams : NamedPipeStreams {

		private NamedPipeClientStream _readPipe;
		private NamedPipeClientStream _writePipe;
		private PipeOptions _options = PipeOptions.Asynchronous;

		/// <summary>
		/// Initializes a new instance of the <see cref="NamedPipeClientStreams"/> class.
		/// </summary>
		/// <param name="pipeName">Name of the pipe.</param>
		/// <autogeneratedoc />
		public NamedPipeClientStreams(string pipeName):base(pipeName,false) {
			CreatePipes();
		}

		public NamedPipeClientStreams(string serverName, string pipeName):base(serverName, pipeName) {
			CreatePipes();
		}

		/// <summary>
		/// Gets the read pipe.
		/// </summary>
		/// <value>The read pipe.</value>
		/// <autogeneratedoc />
		public NamedPipeClientStream ReadPipe => _readPipe;

		/// <summary>
		/// Connects this instance.
		/// </summary>
		/// <inheritdoc cref="NamedPipeClientStream.Connect()" />
		public void Connect() {
			_readPipe.Connect();
			_writePipe.Connect();
		}

		/// <summary>
		/// Connects with the specified time out.
		/// </summary>
		/// <param name="timeOut">The time out.</param>
		/// <inheritdoc cref="NamedPipeClientStream.Connect(int)" />
		public void Connect(int timeOut) {
			_readPipe.Connect(timeOut);
			_writePipe.Connect(timeOut);
		}

		/// <summary>
		/// Creates the pipes.
		/// </summary>
		private void CreatePipes() {
			_readPipe?.Dispose();
			_writePipe?.Dispose();

			// Create a read pipe for receiving notifications from server.
			_readPipe = new NamedPipeClientStream(_serverName, $"{_pipeName}client", PipeDirection.In,_options);

			// Create a write pipe for sending notifications to the server.
			_writePipe = new NamedPipeClientStream(_serverName, $"{_pipeName}server", PipeDirection.Out, _options);

			RegisterPipes(_readPipe, _writePipe);
		}

		/// <summary>
		/// Releases unmanaged and - optionally - managed resources.
		/// </summary>
		/// <param name="explicitDispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
		/// <autogeneratedoc />
		protected override void Dispose(bool explicitDispose) {
			base.Dispose(explicitDispose);
		}

	}

}